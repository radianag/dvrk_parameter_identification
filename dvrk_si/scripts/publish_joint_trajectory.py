#!/usr/bin/env python
# http://wiki.ros.org/rospy/Overview/Messages

#rostopic pub /dvrk/PSM1/set_robot_state std_msgs/String DVRK_POSITION_CARTESIAN
# rostopic info /dvrk/MTML/set_position_joint

import rospy
import math
import time
import csv
from sensor_msgs.msg import JointState
from std_msgs.msg import Header

r=50 #frequency Hz of the publisher and subscriber

def callback_joint(msg):
  global joint_sub
  joint_sub=msg

def main(ra):
    # Create Pose Publisher and Subscriber
    joint_pub= rospy.Publisher('/dvrk/PSM1/set_position_joint', JointState, queue_size=10)
    rospy.Subscriber('/dvrk/PSM1/state_joint_current', JointState, callback_joint)
    rospy.init_node('Talkity_talk_talk',anonymous=True)
    rate = rospy.Rate(ra) # 1hz
    
    #hardcode home to zero 
    joint_msg= JointState()
    joint_msg.header = Header()
    joint_msg.header.stamp = rospy.Time.now()
    joint_msg.name = ['outer_yaw', 'outer_pitch', 'outer_insertion', 'outer_roll', 'outer__wrist_pitch','outer_wrist_jaw', 'jaw']
    joint_msg.position=[0]*7
    joint_msg.velocity = []  
    joint_msg.effort = []
    
    rospy.sleep(1)
    d=0.005
    thresh=0.008
    dq1=thresh+1
    dq2=thresh+1
    dq3=thresh+1
    while not rospy.is_shutdown():
    
      if -thresh<dq1<thresh and -thresh<dq2<thresh  and -thresh<dq3<thresh: 
        break
      else:
        if -thresh<joint_sub.position[0]<thresh:
          dq1=joint_sub.position[0] 
        elif joint_sub.position[0]<0: 
         dq1=joint_sub.position[0]+d
        else: 
          dq1=joint_sub.position[0]-d

        if -thresh<joint_sub.position[1]<thresh: 
         dq2=joint_sub.position[1]
        elif joint_sub.position[1]<0: 
          dq2=joint_sub.position[1]+d
        else: 
          dq2=joint_sub.position[1]-d

        if -thresh<joint_sub.position[2]<thresh:
          dq3=joint_sub.position[2]
        elif joint_sub.position[2]<0: 
          dq3=joint_sub.position[2]+d/10
        else: 
          dq3=joint_sub.position[2]-d/10
  

      #joint_msg.position = [dq1, dq2 , dq3 , None, None, None, None]
      
      joint_msg.position[0]=dq1
      joint_msg.position[1]=dq2
      joint_msg.position[2]=dq3
      joint_msg.position[3]=joint_sub.position[3]
      joint_msg.position[3]=joint_sub.position[4]
      joint_msg.position[3]=joint_sub.position[5]
      joint_msg.position[3]=joint_sub.position[6]

      print(joint_msg)

      joint_pub.publish(joint_msg)
      rospy.sleep(1/float(ra))

    rospy.sleep(3)
    


    #Excitation Trajectory Position Coordinates
    i=0
    q_data1=[0 ,-1.2786e-05, -0.00010059,-0.0003338, -0.00077788,-0.0014934,-0.0025364,-0.0039579,-0.0058049,-0.0081195,-0.01094,-0.0143,-0.01823,-0.022755,-0.027897,-0.033674,-0.040101,-0.04719,-0.054947,-0.063376,-0.07248,-0.082255,-0.092697,-0.1038,-0.11555,-0.12793,-0.14093,-0.15453,-0.16871,-0.18345,-0.19872,-0.21449,-0.23074,-0.24743,-0.26453,-0.28201,-0.29983,-0.31795,-0.33634,-0.35496,-0.37376,-0.3927,-0.41175,-0.43086,-0.44998,-0.46907,-0.48808,-0.50698,-0.52571,-0.54423,-0.5625,-0.58047,-0.59809,-0.61532,-0.63212,-0.64845,-0.66425,-0.67949,-0.69413,-0.70813,-0.72144,-0.73403,-0.74587,-0.75692,-0.76714,-0.7765,-0.78498,-0.79254,-0.79916,-0.80481,-0.80948,-0.81314,-0.81577,-0.81736,-0.8179,-0.81738,-0.81579,-0.81313,-0.8094,-0.80459,-0.79872,-0.79179,-0.78382,-0.77483,-0.76483,-0.75384,-0.7419,-0.72903,-0.71527,-0.70067,-0.68526,-0.6691,-0.65223,-0.63472,-0.61663,-0.59802,-0.57897,-0.55956,-0.53987,-0.51998,-0.5,-0.48002,-0.46013,-0.44044,-0.42103,-0.40198,-0.38337,-0.36528,-0.34777,-0.3309,-0.31474,-0.29933,-0.28473,-0.27097,-0.2581,-0.24616,-0.23517,-0.22517,-0.21618,-0.20821,-0.20128,-0.19541,-0.1906,-0.18687,-0.18421,-0.18262,-0.1821,-0.18264,-0.18423,-0.18686,-0.19052,-0.19519,-0.20084,-0.20746,-0.21502,-0.2235,-0.23286,-0.24308,-0.25413,-0.26597,-0.27856,-0.29187,-0.30587,-0.32051,-0.33575,-0.35155,-0.36788,-0.38468,-0.40191,-0.41953,-0.4375,-0.45577,-0.47429,-0.49302,-0.51192,-0.53093,-0.55002,-0.56914,-0.58825,-0.6073,-0.62624,-0.64504,-0.66366,-0.68205,-0.70017,-0.71799,-0.73547,-0.75257,-0.76926,-0.78551,-0.80128,-0.81655,-0.83129,-0.84547,-0.85907,-0.87207,-0.88445,-0.8962,-0.9073,-0.91774,-0.92752,-0.93662,-0.94505,-0.95281,-0.9599,-0.96633,-0.9721,-0.97725,-0.98177,-0.9857,-0.98906,-0.99188,-0.9942,-0.99604,-0.99746,-0.99851,-0.99922,-0.99967,-0.9999,-0.99999,-1,-1,-1,-1.0001,-1.0002,-1.0003,-1.0006,-1.0009,-1.0013,-1.0018,-1.0024,-1.0031,-1.0039,-1.0048,-1.0059,-1.0071,-1.0083,-1.0097,-1.0112,-1.0128,-1.0146,-1.0164,-1.0183,-1.0202,-1.0223,-1.0244,-1.0266,-1.0288,-1.0311,-1.0333,-1.0356,-1.0379,-1.0402,-1.0425,-1.0447,-1.0468,-1.0489,-1.0509,-1.0529,-1.0547,-1.0563,-1.0578,-1.0592,-1.0604,-1.0614,-1.0622,-1.0628,-1.0631,-1.0632,-1.063,-1.0625,-1.0617,-1.0606,-1.0592,-1.0574,-1.0553,-1.0528,-1.0499,-1.0467,-1.043,-1.0389,-1.0343,-1.0294,-1.0239,-1.018,-1.0117,-1.0048,-0.9975,-0.98969,-0.98137,-0.97256,-0.96324,-0.95342,-0.94309,-0.93225,-0.9209,-0.90904,-0.89669,-0.88383,-0.87048,-0.85664,-0.84232,-0.82753,-0.81228,-0.79658,-0.78045,-0.7639,-0.74694,-0.72959,-0.71188,-0.69382,-0.67544,-0.65675,-0.6378,-0.6186,-0.59918,-0.57957,-0.55982,-0.53995,-0.51999,-0.5,-0.5,-0.46016,-0.44052,-0.4212,-0.40232,-0.38394,-0.36616,-0.34905,-0.33268,-0.31712,-0.30242,-0.28864,-0.27582,-0.264,-0.25322,-0.24352,-0.23491,-0.22741,-0.22106,-0.21584,-0.21178,-0.20887,-0.20711,-0.2065,-0.20703,-0.20868,-0.21145,-0.2153,-0.22021,-0.22616,-0.23312,-0.24105,-0.24993,-0.2597,-0.27034,-0.28179,-0.29402,-0.30698,-0.32062,-0.33488,-0.34972,-0.36508,-0.38091,-0.39715,-0.41375,-0.43064,-0.44777,-0.46508,-0.48251,-0.5,-0.51749,-0.53492,-0.55223,-0.56936,-0.58625,-0.60285,-0.61909,-0.63492,-0.65028,-0.66512,-0.67938,-0.69302,-0.70598,-0.71821,-0.72966,-0.7403,-0.75007,-0.75895,-0.76688,-0.77384,-0.77979,-0.7847,-0.78855,-0.79132,-0.79297,-0.7935,-0.79289,-0.79113,-0.78822,-0.78416,-0.77894,-0.77259,-0.76509,-0.75648,-0.74678,-0.736,-0.72418,-0.71136,-0.69758,-0.68288,-0.66732,-0.65095,-0.63384,-0.61606,-0.59768,-0.5788,-0.55948,-0.53984,-0.51998,-0.5,-0.5,-0.48001,-0.44018,-0.42043,-0.40082,-0.3814,-0.3622,-0.34325,-0.32456,-0.30618,-0.28812,-0.27041,-0.25306,-0.2361,-0.21955,-0.20342,-0.18772,-0.17247,-0.15768,-0.14336,-0.12952,-0.11617,-0.10331,-0.090956,-0.079102,-0.067753,-0.056913,-0.046581,-0.036757,-0.02744,-0.018626,-0.010313,-0.0024963,0.0048299,0.011672,0.018036,0.023929,0.029362,0.034342,0.03888,0.042986,0.046671,0.049947,0.052825,0.05532,0.057443,0.059208,0.06063,0.061723,0.0625,0.062978,0.06317,0.063093,0.062762,0.062193,0.061401,0.060401,0.059211,0.057845,0.05632,0.054651,0.052853,0.050942,0.048933,0.046841,0.044681,0.042467,0.040213,0.037933,0.03564,0.033347,0.031066,0.02881,0.026589,0.024414,0.022295,0.020242,0.018263,0.016367,0.01456,0.012849,0.011239,0.0097361,0.0083427,0.0070622,0.0058963,0.0048459,0.0039108,0.0030897,0.00238,0.0017782,0.0012796,0.00087798,0.00056609,0.00033531,0.00017567,7.5808e-05,2.297e-05,2.9353e-06,0]
    q_data2=[0, -2.2537e-06, -1.7663e-05, -5.8385e-05 ,-0.00013551,-0.00025909 ,-0.00043817 ,-0.00068078 ,-0.00099402,-0.001384,-0.001856,-0.0024143,-0.0030624,-0.003803,-0.0046378,-0.0055679,-0.0065936,-0.0077143,-0.008929,-0.010236,-0.011632,-0.013115,-0.01468,-0.016323,-0.01804,-0.019824,-0.021671,-0.023572,-0.025522,-0.027513,-0.029538,-0.031588,-0.033654,-0.035728,-0.037801,-0.039863,-0.041905,-0.043916,-0.045886,-0.047806,-0.049664,-0.05145,-0.053154,-0.054764,-0.056269,-0.057659,-0.058923,-0.06005,-0.061029,-0.061849,-0.0625,-0.062971,-0.063251,-0.063331,-0.0632,-0.062848,-0.062266,-0.061445,-0.060375,-0.059049,-0.057456,-0.05559,-0.053443,-0.051007,-0.048276,-0.045244,-0.041905,-0.038254,-0.034286,-0.029996,-0.025382,-0.02044,-0.015169,-0.0095659,-0.0036308,0.0026367,0.0092361,0.016166,0.023424,0.031007,0.038912,0.047134,0.055666,0.064503,0.073638,0.08306,0.092762,0.10273,0.11296,0.12343,0.13414,0.14505,0.15617,0.16748,0.17894,0.19055,0.20229,0.21412,0.22604,0.238,0.25,0.262,0.27396,0.28588,0.29771,0.30945,0.32106,0.33252,0.34383,0.35495,0.36586,0.37657,0.38704,0.39727,0.40724,0.41694,0.42636,0.4355,0.44433,0.45287,0.46109,0.46899,0.47658,0.48383,0.49076,0.49736,0.50363,0.50957,0.51517,0.52044,0.52538,0.53,0.53429,0.53825,0.54191,0.54524,0.54828,0.55101,0.55344,0.55559,0.55746,0.55905,0.56038,0.56145,0.56227,0.56285,0.5632,0.56333,0.56325,0.56297,0.5625,0.56185,0.56103,0.56005,0.55892,0.55766,0.55627,0.55476,0.55315,0.55145,0.54966,0.54781,0.54589,0.54392,0.5419,0.53986,0.5378,0.53573,0.53365,0.53159,0.52954,0.52751,0.52552,0.52357,0.52167,0.51982,0.51804,0.51632,0.51468,0.51311,0.51163,0.51024,0.50893,0.50771,0.50659,0.50557,0.50464,0.5038,0.50306,0.50241,0.50186,0.50138,0.50099,0.50068,0.50044,0.50026,0.50014,0.50006,0.50002,0.5,0.5,0.5,0.50004,0.50012,0.50029,0.50055,0.50093,0.50145,0.50213,0.50297,0.504,0.50522,0.50664,0.50828,0.51014,0.51222,0.51453,0.51708,0.51986,0.52287,0.52611,0.52959,0.53329,0.53721,0.54135,0.5457,0.55026,0.555,0.55993,0.56504,0.57031,0.57573,0.58129,0.58697,0.59276,0.59866,0.60463,0.61067,0.61676,0.62288,0.62902,0.63517,0.64129,0.64738,0.65341,0.65938,0.66525,0.67102,0.67666,0.68216,0.6875,0.69266,0.69762,0.70236,0.70687,0.71113,0.71512,0.71883,0.72224,0.72533,0.7281,0.73051,0.73257,0.73425,0.73555,0.73645,0.73694,0.73701,0.73665,0.73586,0.73461,0.73291,0.73076,0.72814,0.72505,0.72148,0.71745,0.71295,0.70797,0.70252,0.69661,0.69023,0.68341,0.67613,0.66842,0.66029,0.65174,0.64279,0.63346,0.62376,0.61372,0.60336,0.5927,0.58175,0.57057,0.55916,0.54756,0.53581,0.52394,0.51199,0.5,0.5,0.47607,0.46425,0.45258,0.44112,0.4299,0.41897,0.40837,0.39812,0.38827,0.37884,0.36986,0.36135,0.35333,0.34582,0.33884,0.33241,0.32652,0.3212,0.31645,0.31227,0.30868,0.30566,0.30323,0.30137,0.30008,0.29937,0.29921,0.29961,0.30054,0.30201,0.30399,0.30647,0.30944,0.31288,0.31676,0.32108,0.32581,0.33093,0.33642,0.34225,0.3484,0.35486,0.36158,0.36856,0.37576,0.38315,0.39072,0.39842,0.40625,0.41417,0.42214,0.43016,0.43818,0.44619,0.45415,0.46204,0.46983,0.4775,0.48502,0.49237,0.49953,0.50646,0.51315,0.51957,0.52571,0.53154,0.53704,0.5422,0.547,0.55142,0.55544,0.55906,0.56227,0.56504,0.56737,0.56926,0.5707,0.57167,0.57219,0.57225,0.57185,0.57099,0.56968,0.56792,0.56573,0.56311,0.56009,0.55667,0.55287,0.54871,0.54422,0.53943,0.53435,0.52903,0.5235,0.51778,0.51193,0.50599,0.5,0.5,0.494,0.48196,0.47592,0.46984,0.46373,0.45758,0.45139,0.44515,0.43886,0.43251,0.42611,0.41965,0.41313,0.40655,0.39991,0.39321,0.38644,0.37962,0.37274,0.3658,0.3588,0.35175,0.34465,0.3375,0.33031,0.32307,0.3158,0.30849,0.30115,0.29379,0.28641,0.27901,0.2716,0.26419,0.25678,0.24937,0.24197,0.23459,0.22723,0.2199,0.21261,0.20536,0.19815,0.191,0.18391,0.17688,0.16992,0.16304,0.15625,0.14955,0.14294,0.13643,0.13003,0.12375,0.11758,0.11154,0.10563,0.099847,0.094208,0.088713,0.083366,0.078172,0.073134,0.068257,0.063544,0.058997,0.05462,0.050416,0.046386,0.042532,0.038857,0.03536,0.032043,0.028906,0.025949,0.023172,0.020573,0.018151,0.015904,0.01383,0.011926,0.010188,0.0086127,0.0071955,0.0059312,0.0048142,0.0038384,0.0029968,0.002282,0.001686,0.0012,0.00081458,0.00051977,0.00030475,0.00015807,6.7556e-05,2.0276e-05,2.5671e-06, -4.4409e-16]   
    q_data3=[0,1.0995e-07,8.791e-07,2.9652e-06,7.0241e-06,1.3709e-05,2.3672e-05,3.756e-05,5.6017e-05,7.9685e-05,0.0001092,0.00014519,0.0001883,0.00023913,0.00029831,0.00036644,0.00044414,0.00053199,0.0006306,0.00074055,0.0008624,0.00099673,0.0011441,0.0013051,0.0014802,0.0016699,0.0018749,0.0020955,0.0023324,0.0025859,0.0028566,0.0031449,0.0034514,0.0037764,0.0041203,0.0044837,0.0048668,0.0052701,0.005694,0.0061387,0.0066048,0.0070925,0.007602,0.0081338,0.0086881,0.0092651,0.0098652,0.010489,0.011135,0.011806,0.0125,0.013218,0.013961,0.014727,0.015518,0.016334,0.017174,0.018038,0.018927,0.019841,0.020779,0.021742,0.022729,0.02374,0.024776,0.025835,0.026919,0.028026,0.029157,0.030311,0.031487,0.032687,0.033909,0.035153,0.036418,0.037705,0.039013,0.040341,0.041688,0.043056,0.044442,0.045846,0.047268,0.048707,0.050162,0.051633,0.053118,0.054618,0.056131,0.057657,0.059195,0.060743,0.062301,0.063868,0.065443,0.067025,0.068613,0.070206,0.071802,0.0734,0.075,0.076599,0.078196,0.079786,0.081368,0.082938,0.084495,0.086035,0.087557,0.089059,0.090539,0.091995,0.093426,0.09483,0.096206,0.097553,0.098869,0.10015,0.10141,0.10263,0.10382,0.10497,0.10609,0.10718,0.10823,0.10925,0.11023,0.11118,0.1121,0.11298,0.11383,0.11464,0.11542,0.11618,0.1169,0.11759,0.11825,0.11888,0.11949,0.12007,0.12062,0.12115,0.12165,0.12214,0.1226,0.12304,0.12346,0.12387,0.12426,0.12464,0.125,0.12535,0.12569,0.12602,0.12634,0.12666,0.12697,0.12728,0.12758,0.12789,0.12819,0.12849,0.1288,0.12911,0.12943,0.12975,0.13008,0.13042,0.13077,0.13113,0.1315,0.13189,0.13228,0.1327,0.13312,0.13356,0.13402,0.1345,0.13499,0.1355,0.13603,0.13658,0.13714,0.13773,0.13833,0.13895,0.13959,0.14024,0.14091,0.1416,0.14231,0.14303,0.14376,0.14451,0.14527,0.14604,0.14682,0.14761,0.1484,0.1492,0.15,0.1508,0.15159,0.15238,0.15315,0.15391,0.15464,0.15535,0.15604,0.15669,0.15732,0.1579,0.15845,0.15897,0.15944,0.15987,0.16026,0.1606,0.1609,0.16116,0.16137,0.16153,0.16165,0.16172,0.16174,0.16172,0.16165,0.16154,0.16139,0.16119,0.16095,0.16068,0.16036,0.16,0.15961,0.15919,0.15873,0.15824,0.15772,0.15718,0.1566,0.15601,0.1554,0.15476,0.15411,0.15345,0.15277,0.15209,0.1514,0.1507,0.15,0.1493,0.1486,0.14791,0.14723,0.14655,0.14589,0.14524,0.1446,0.14399,0.1434,0.14282,0.14228,0.14176,0.14127,0.14081,0.14039,0.14,0.13964,0.13932,0.13905,0.13881,0.13861,0.13846,0.13835,0.13828,0.13826,0.13828,0.13835,0.13847,0.13863,0.13884,0.1391,0.1394,0.13974,0.14013,0.14056,0.14103,0.14155,0.1421,0.14268,0.14331,0.14396,0.14465,0.14536,0.14609,0.14685,0.14762,0.14841,0.1492,0.15,0.15,0.15159,0.15235,0.15309,0.15378,0.15443,0.15503,0.15556,0.15602,0.15641,0.15671,0.15694,0.15707,0.15711,0.15706,0.15691,0.15666,0.1563,0.15584,0.15528,0.15461,0.15384,0.15297,0.15199,0.15091,0.14973,0.14845,0.14707,0.1456,0.14404,0.14238,0.14065,0.13883,0.13694,0.13497,0.13294,0.13084,0.12868,0.12646,0.1242,0.12189,0.11954,0.11715,0.11474,0.11231,0.10986,0.1074,0.10493,0.10246,0.1,0.097551,0.095119,0.092712,0.090333,0.08799,0.085688,0.083432,0.081228,0.079081,0.076997,0.07498,0.073036,0.07117,0.069386,0.067688,0.066081,0.064568,0.063155,0.061843,0.060637,0.059539,0.058552,0.057678,0.05692,0.056279,0.055757,0.055355,0.055073,0.054911,0.05487,0.054949,0.055148,0.055463,0.055894,0.056439,0.057094,0.057857,0.058722,0.059687,0.060745,0.061892,0.063122,0.064427,0.065801,0.067236,0.068722,0.070252,0.071816,0.073402,0.075,0.075,0.076598,0.079756,0.081297,0.082801,0.084261,0.08567,0.08702,0.088306,0.089521,0.090661,0.091721,0.092695,0.093582,0.094376,0.095074,0.095675,0.096176,0.096575,0.09687,0.097061,0.097146,0.097126,0.097,0.096768,0.09643,0.095989,0.095444,0.094797,0.094051,0.093206,0.092264,0.09123,0.090104,0.088889,0.08759,0.086208,0.084748,0.083212,0.081605,0.07993,0.078192,0.076393,0.07454,0.072635,0.070684,0.06869,0.066658,0.064593,0.0625,0.060383,0.058246,0.056094,0.053933,0.051766,0.049598,0.047434,0.045279,0.043136,0.041011,0.038908,0.03683,0.034782,0.032768,0.030792,0.028857,0.026968,0.025128,0.023339,0.021605,0.01993,0.018315,0.016763,0.015276,0.013857,0.012508,0.011228,0.010021,0.0088865,0.0078256,0.0068386,0.0059255,0.0050861,0.0043197,0.0036253,0.0030017,0.0024472,0.0019595,0.0015364,0.0011748,0.00087151,0.00062277,0.00042443,0.00027187,0.00016001,8.3308e-05,3.5734e-05,1.0764e-05,1.3676e-06,2.2204e-16]



   
   
    q_output=[None]*len(q_data1)
    qd_output=[None]*len(q_data1)
    torque_output=[None]*len(q_data1)

    while not rospy.is_shutdown():
      if i>len(q_data1)-1:
        break
      joint_msg.position = [q_data1[i], q_data2[i], q_data3[i],joint_sub.position[3],joint_sub.position[4],joint_sub.position[5],joint_sub.position[6]]
      joint_msg.velocity = []  
      joint_msg.effort = []
      print(joint_msg)
      joint_pub.publish(joint_msg)

      q_output[i]=joint_sub.position
      qd_output[i]=joint_sub.velocity
      torque_output[i]=joint_sub.effort

      rospy.sleep(1/float(ra))
      i+=1
    rate.sleep()
    
    #Print Code
    with open('data_position.csv', 'wb') as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_NONE)
        for i in range(0,len(q_data1)):
          wr.writerow(q_output[i])
    with open('data_velocity.csv', 'wb') as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_NONE)
        for i in range(0,len(q_data1)):
          wr.writerow(qd_output[i])
    with open('data_torque.csv', 'wb') as myfile:
        wr = csv.writer(myfile, quoting=csv.QUOTE_NONE)
        for i in range(0,len(q_data1)):
          wr.writerow(torque_output[i])    
    

if __name__ == '__main__':
    try:
      main(r)
      
    except rospy.ROSInterruptException:
      
      pass
